# Load the recipe.json
import json
import os
import re
import sys
sys.path.insert(0, 'ladybug')
sys.path.insert(0, 'honeybee')
from honeybee.radiance.recipe.daylightfactor.gridbased import GridBased as GridBasedDF
from honeybee.radiance.recipe.annual.gridbased import GridBased as GridBasedAnnual
from honeybee.futil import bat_to_sh


def load_json(path):
    """
    Description:
        Load a JSON file into a dictionary object
    Arguments:
        path [string]: The location of the JSON file being loaded
    Returns:
        dictionary [dict]: Dictionary containing contents of loaded JSON file
    """
    with open(path) as data_file:
        return json.load(data_file)


# Load the recipe
ZONE = "CM2_S_Outer"
RECIPE_PATH = "C:/Users/tgerrish/Desktop/SAMAzure/TestFiles/TESTTESTTEST/CM2_S_Inner/annual/recipe.json"
RECIPE = load_json(RECIPE_PATH)

# Load the geometry
GEOMETRY_PATH = r"C:\Users\tgerrish\Desktop\SAMAzure\TestFiles\TESTTESTTEST\geometry.json"
GEOMETRY = load_json(GEOMETRY_PATH)["surfaces"]

# Update recipe to include geometry
RECIPE["surfaces"] = GEOMETRY

# Generate the Radiance case from the reconstituted recipe
RECIPE = GridBasedDF.from_json(RECIPE)



# Fix the -dr issue
for file in [SHELL_FILE, BAT_FILE]:
    with open(file, "r") as f:
        dr_fix = re.sub("-dr (.*?) -", "-dr 3 -", f.read())
    with open(file, "w") as f:
        f.write(dr_fix)

# Run the case using command prompts generated by Honeybee
if os.name == 'nt':
    success = RECIPE.run(BAT_FILE)
else:
    success = RECIPE.run(SHELL_FILE)
# Process the results to give actual bona-fide analysis data as JSON outputs for ease of processing later on!